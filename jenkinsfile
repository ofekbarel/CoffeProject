























pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata:
            name: docker-image-build
            spec:
            containers:
                - name: ez-docker-helm-build
                image: ezezeasy/ez-docker-helm-build:1.41
                imagePullPolicy: Always
                securityContext:
                    privileged: true

                - name: python-test
                image: python:3.9-slim
                command: ["sleep"]
                args: ["infinity"]
                imagePullPolicy: Always
                securityContext:
                    privileged: false

                - name: docker-compose
                image: docker/compose:latest
                command: ["sleep"]
                args: ["infinity"]
                imagePullPolicy: Always
                securityContext:
                    privileged: true
                volumeMounts:
                    - name: docker-socket
                    mountPath: /var/run/docker.sock

            volumes:
                - name: docker-socket
                hostPath:
                    path: /var/run/docker.sock
                    type: Socket
            '''
        }
    }
    environment {
        GITLAB_CREDS = 'ofek-githab-cred'
        DOCKER_IMAGE = 'ofekbarel11/finalproject'
        // No longer using the 'localhost' since we'll be using a Docker network
        PROJECT_ID = '55375787'
        GITHAB_URL = 'https://githab.com'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build and tag Docker image for feature branches
                    dockerImage = docker.build("${DOCKER_IMAGE}:latest", "--no-cache .")
                }
            }
        }


        stage('Build Test Docker image and Run Tests') {
            steps {
                container('docker-compose') {
                    script {
                        // Create a custom Docker network
                        sh 'docker network create coffee-app-net'
                        
                        // Build the Docker test image
                        def testDockerImage = docker.build("coffee-app-test:${BUILD_NUMBER}", "-f Dockerfile.test .")
                        
                        // Start MongoDB container on the custom network
                        sh 'docker run --name postgres \
                                --network coffee-app-net \
                                -e POSTGRES_PASSWORD=testpostgres \
                                -e POSTGRES_USER=testpostgres \
                                -e POSTGRES_DB=test\
                                postgres:14'
                        
                        // Wait for MongoDB to fully start
                        sh 'sleep 15'
                        
                        // Run the test container on the custom network, ensure the MONGO_URI environment variable
                        // is set within the container to use the MongoDB container's hostname
                        sh 'docker run --name coffee-app-test-container \
                                --network coffee-app-net \
                                -e POSTGRES_PASSWORD=testpostgres \
                                -e POSTGRES_USER=testpostgres \
                                coffee-app-test:${BUILD_NUMBER}'
                    }
                }
            }
        }


        stage ('Push Docker image') {
            when {
                branch 'main'
            }
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'ofek-Dockerhub' ) {
                        dockerImage.push("latest")
                    }
                }
            }
        }





        stage('Create Merge Request') {
            when {
                not {
                    branch 'main'
                }
            }
            steps {
                script {
                    withCredentials([string(credentialsId: 'roy-gitlab-api', variable: 'GITLAB_API_TOKEN')]) {
                        def response = sh(script: """
                        curl -s -o response.json -w "%{http_code}" --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" -X POST "${GITLAB_URL}/api/v4/projects/${PROJECT_ID}/merge_requests" \
                        --form "source_branch=${env.BRANCH_NAME}" \
                        --form "target_branch=main" \
                        --form "title=MR from ${env.BRANCH_NAME} into main" \
                        --form "remove_source_branch=false"
                        """, returnStdout: true).trim()
                        if (response.startsWith("20")) {
                            echo "Merge request created successfully."
                        } else {
                            echo "Failed to create merge request. Response Code: ${response}"
                            def jsonResponse = readJSON file: 'response.json'
                            echo "Error message: ${jsonResponse.message}"
                            error "Merge request creation failed."
                        }
                    }
                }
            }
        }
    }


    post {
        failure {
            emailext body: 'The build failed. Please check the build logs for details.',
                     subject: "Build failed: ${currentBuild.fullDisplayName}",
                     to: 'ofekbarel10@gmail.com'
        }



        always {
            // Cleanup MongoDB container, the test container, and the custom network
            // to ensure no conflicts on subsequent runs
            sh 'docker rm -f postgres'
            sh 'docker rm -f coffee-app-test-container'
            sh 'docker network rm coffee-app-net'
            cleanWs()
        }
    }

    
    
       
}  


