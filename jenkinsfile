pipeline {
    agent {
        kubernetes{
            yaml '''
            apiVersion: v1
            Kind: Pod
            spec:
              containers:
              - name: maven
                image: maven:alpine
                command:
                - cat 
                tty: true
              - name: postgres
                image: postgres:14
                env:
                - name: POSTGRES_USER
                  value: "postgres"
                - name: POSTGRES_PASSWORD
                  value: "postgres"
                - name: POSTGRES_DB
                  value: "test"
                - name: HOST
                  value: "localhost"
              - name: docker
                image: docker:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - mountPath: /var/run/docker.sock
                name: docker-sock
                securityContext:
                  privileged: true
            volumes:
            - name: docker-sock
                hostPath:
                path: /var/run/docker.sock



            '''
        }
    }


    environment{
        DOCKER_IMAGE = "ofekbarel11/coffeproject"

    }



    stages{
        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }



        stage('maven version'){
            steps{
                container('maven'){
                    sh 'mvn -version'
                }
            }
        }

    


        //test test_app.py inside postgres container if branch is feature
        stage('test') {
            when {
                branch 'feature'
            }
            steps{
                container('postgres') {
                    // Install python and pytest
                    sh 'apt-get update && apt-get install -y python3 python3-pip libpq-dev gcc'
                    sh 'pip3 install -r requirements.txt --break-system-packages'
                    sh 'pytest test_app.py'
                }
                    
            }
        }


        stage('Build-Docker-Image') {
            when {
                branch 'main'
            }
            steps {
                script {
                    withRegistry([credentialsId: 'ofek-Dockerhub', url: 'https://registry.hub.docker.com']) {
                        container('docker') {
                            sh 'docker build -t ${DOCKER_IMAGE}:latest .'
                            sh 'docker push ${DOCKER_IMAGE}:latest'
                        }
                    }
                }
            }
        }

    }




    post {
        failure {
            emailext body: 'The build failed. Please check the build logs for details.',
                     subject: "Build failed: ${currentBuild.fullDisplayName}",
                     to: 'ofekbarel10@gmail.com'
        }
    }
}
